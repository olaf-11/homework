/*
 * Олег Макиевский (группа MK-JC1-50-20)
 * г. Минск, 2020
 *
 * Задание 2. (Тема: операторы)
 * Изучить приоритетность операторов по таблице.
 * Сначала посчитать результаты всех ниже приведённых примеров устно, а потом проверить в IDE
 * (в случае ошибок свериться с таблицей приоритетов, повторять просчёт примеров до полного соответствия).
 * Результатом МОЖЕТ БЫТЬ ОШИБКА компиляции, может быть ошибка выполнения программы
 * или корректный результат. Все значения в этих переменных должны быть записаны
 * в int и boolean переменные. Напротив каждой строчки нужно написать комментарий
 * с результатом и объяснением почему вы получили такой результат.
 *
 * 5 + 2 / 8
 * (5 + 2) / 8
 * (5 + 2++) / 8
 * (5 + 2++) / --8
 * (5 * 2 >> 2++) / --8
 * (5 + 7 > 20 ? 68 : 22 * 2 >> 2++) / --8
 * (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> 2++) / --8
 * 6 - 2 > 3 && 12 * 12 <= 119
 * true && false
 */
package lesson02;

public class OlegTask2 {
    public static void main(String[] args) {

        /* 2 / 8 = 0.25,  дробная часть отбрасывается
         * 5 + 0 = 5
         * Результат: res = 5 */
        int res = 5 + 2 / 8;
        System.out.println("5 + 2 / 8 = " + res);

        /* 5 + 2 = 7
         * 7 / 8 = 0.875, дробная часть отбрасывается
         * Результать: res = 0 */
        res = (5 + 2) / 8;
        System.out.println("(5 + 2) / 8 = " + res);

        int i = 2;
        /* 5 + 2 = 7
         * i++ = 3, но значение уже не используется в выражении
         * 7 / 8 = 0.875, дробная часть отбрасывается
         * Результат: res = 0 */
        res = (5 + i++) / 8;
        System.out.println("(5 + 2++) / 8 = " + res);

        i = 2;
        int k = 8;
        /* 5 + 2 = 7
         * i++ = 3, но значение уже не используется в выражении
         * --8 = 7
         * 7 / 7 = 1
         * Результат: res = 1 */
        res = (5 + i++) / --k;
        System.out.println("(5 + 2++) / --8 = " + res);

        i = 2;
        k = 8;
        /* 5 * 2 = 10
         * i++ = 3, но значение уже не используется в выражении
         * 10 >> 2 = 2 (0000 1010 >> 2 = 0000 0010)
         * --8 = 7
         * 2 / 7 = 0.2857142..., дробная часть отбрасывается
         * Результат: res = 0 */
        res = (5 * 2 >> i++) / --k;
        System.out.println("(5 * 2 >> 2++) / --8 = " + res);

        i = 2;
        k = 8;
        /* if (5 + 7 > 20) — нет
         * 22 * 2 = 44
         * 44 >> 2 = 11 (0010 1100 >> 2 = 0000 1011)
         * i++ = 3, но значение уже не используется в выражении
         * --8 = 7
         * 11 / 7 = 1.5714285..., дробная часть отбрасывается
         * Результат: res = 1 */
        res = (5 + 7 > 20 ? 68 : 22 * 2 >> i++) / --k;
        System.out.println("(5 + 7 > 20 ? 68 : 22 * 2 >> 2++) / --8 = " + res);

        i = 2;
        k = 8;
        /* В тернарном операторе типы выражений разделенные : должны совпадать
         * 68 >= 68 — результатом будет значение boolean
         * 22 * 2 >> 2++ — результатом будет значение int
         * Результат: Ошибка! */
        // res = (5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> i++) / --k;
        // System.out.println("(5 + 7 > 20 ? 68 >= 68 : 22 * 2 >> 2++) / --8 = " + res);

        /* 6 - 2 = 4
         * 4 > 3 ==== true
         * 12 * 12 = 144
         * 144 <= 119 === false
         * true && false === false
         * Результат: res = false */
        boolean bl = 6 - 2 > 3 && 12 * 12 <= 119;
        System.out.println("6 - 2 > 3 && 12 * 12 <= 119 = " + bl);

        /* true && false === false
         * Результат: res = false */
        bl = true && false;
        System.out.println("true && false = " + bl);
    }
}